//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

enum UserStatus {
  INVITED
  VERIFIED
}

/// @@auth
/// @@allow('all', auth().id == this.id)
/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('create', globalRole != 'ADMIN')
/// @@allow('read', true)
model User {
  id                        String            @id() @default(uuid())
  name                      String?
  email                     String?           @unique()
  pictureUrl                String?           @default("https://i.imgur.com/ZdJSK3Y.jpeg")
  tokenInvitation           String?
  stripeCustomerId          String?
  status                    UserStatus        @default(VERIFIED)
  globalRole                String            @default("USER")
  /// @password
  /// @omit
  password                  String?
  createdAt                 DateTime          @default(now())
  updatedAt                 DateTime          @default(now()) @updatedAt()
  pwaSubscriptions          PwaSubscription[] @relation("user")
  assessments               Assessment[]      @relation("user")
  consultations             Consultation[]    @relation("user")
  consultationsAsConsultant Consultation[]    @relation("consultant")
  messagesAsSender          Message[]         @relation("sender")
  tickets                   Ticket[]          @relation("user")
  chats                     Chat[]            @relation("user")
}

/// @@allow('all', true)
model MembershipTier {
  id                     String                  @id() @default(uuid())
  name                   String
  price                  String
  benefits               String?
  description            String?
  resources              Resource[]              @relation("membershipTier")
  serviceMembershipTiers ServiceMembershipTier[] @relation("membershipTier")
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Resource {
  id               String          @id() @default(uuid())
  title            String
  content          String?
  topic            String?
  difficultyLevel  String?
  membershipTierId String
  membershipTier   MembershipTier? @relation(fields: [membershipTierId], references: [id], name: "membershipTier")
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Assessment {
  id            String         @id() @default(uuid())
  score         Float?
  status        String?
  feedback      String?
  userId        String
  user          User?          @relation(fields: [userId], references: [id], name: "user")
  consultations Consultation[] @relation("assessment")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Consultation {
  id           String      @id() @default(uuid())
  status       String?
  scheduledAt  String?
  notes        String?
  userId       String
  user         User?       @relation(fields: [userId], references: [id], name: "user")
  assessmentId String
  assessment   Assessment? @relation(fields: [assessmentId], references: [id], name: "assessment")
  consultantId String
  consultant   User?       @relation(fields: [consultantId], references: [id], name: "consultant")
  messages     Message[]   @relation("consultation")
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Message {
  id             String        @id() @default(uuid())
  content        String?
  type           String?
  consultationId String
  consultation   Consultation? @relation(fields: [consultationId], references: [id], name: "consultation")
  senderId       String
  sender         User?         @relation(fields: [senderId], references: [id], name: "sender")
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Ticket {
  id        String   @id() @default(uuid())
  subject   String
  status    String?
  priority  String?
  userId    String
  user      User?    @relation(fields: [userId], references: [id], name: "user")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Chat {
  id          String   @id() @default(uuid())
  modelType   String?
  content     String?
  preferences Json?
  userId      String
  user        User?    @relation(fields: [userId], references: [id], name: "user")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Service {
  id                     String                  @id() @default(uuid())
  name                   String
  description            String?
  price                  String?
  type                   String?
  serviceMembershipTiers ServiceMembershipTier[] @relation("service")
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @default(now()) @updatedAt()
}

/// @@allow('all', true)
model ServiceMembershipTier {
  serviceId        String
  service          Service?        @relation(fields: [serviceId], references: [id], name: "service")
  membershipTierId String
  membershipTier   MembershipTier? @relation(fields: [membershipTierId], references: [id], name: "membershipTier")
  id               String          @id() @default(uuid())
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @default(now()) @updatedAt()
}

/// @@allow('all', true)
model PwaSubscription {
  id        String   @id() @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt()
  userId    String
  user      User     @relation(fields: [userId], references: [id], name: "user")
}
